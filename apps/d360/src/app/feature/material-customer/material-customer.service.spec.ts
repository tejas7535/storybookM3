import { take } from 'rxjs';

import {
  createHttpFactory,
  HttpMethod,
  SpectatorHttp,
} from '@ngneat/spectator/jest';

import { MaterialCustomerService } from './material-customer.service';

describe('MaterialCustomerService', () => {
  let spectator: SpectatorHttp<MaterialCustomerService>;
  const createHttp = createHttpFactory(MaterialCustomerService);

  beforeEach(() => {
    spectator = createHttp();
  });

  afterEach(() => {
    spectator.controller.verify();
  });

  it('should return total materials count of customer', (done) => {
    const mockResponse = { rowCount: 5 };
    const customerNumber = '123';

    spectator.service
      .getTotalMaterialsCountOfCustomer(customerNumber)
      .pipe(take(1))
      .subscribe((response) => {
        expect(response).toEqual(mockResponse.rowCount);
        done();
      });

    const req = spectator.expectOne('api/material-customer', HttpMethod.POST);
    req.flush(mockResponse);
  });

  // Empty observable is returned, nothing to assert
  // eslint-disable-next-line jest/expect-expect
  it('should return an empty observable when customer number is not provided', (done) => {
    spectator.service
      .getTotalMaterialsCountOfCustomer()
      .pipe(take(1))
      .subscribe({
        next: () => done.fail('Should not emit next'),
        complete: done,
      });
  });

  it('should return criteria data', (done) => {
    const mockResponse = { field1: 'value1', field2: 'value2' };

    spectator.service
      .getCriteriaData()
      .pipe(take(1))
      .subscribe((response) => {
        expect(response).toEqual(mockResponse);
        done();
      });

    const req = spectator.expectOne(
      'api/material-customer/criteria-fields',
      HttpMethod.GET
    );
    req.flush(mockResponse);
  });

  it('should return material customer data', (done) => {
    const mockResponse = {
      rows: [{ materialNumber: '123', materialDescription: 'description' }],
      rowCount: 1,
    };
    const selectedIds = ['123'];

    spectator.service
      .getMaterialCustomerData(selectedIds)
      .pipe(take(1))
      .subscribe((response) => {
        expect(response).toEqual(mockResponse);
        done();
      });

    const req = spectator.expectOne(
      'api/material-customer/materials',
      HttpMethod.POST
    );
    req.flush(mockResponse);
  });

  // TODO add test for error handling and test with logic. This test are generated by copilot
});
