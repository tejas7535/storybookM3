import { computed, inject, Injectable } from '@angular/core';
import { toObservable, toSignal } from '@angular/core/rxjs-interop';

import { switchMap } from 'rxjs';

import { TranslocoService } from '@jsverse/transloco';

import {
  Colors,
  ConditionalPageBreak,
  ControlCommands,
  DisclaimerFooter,
  FontConfig,
  FontResolverService,
  PDFDocument,
  PDFHeader,
} from '@schaeffler/pdf-generator';

import { SettingsFacade } from '@ga/core/store';
import { PartnerVersion } from '@ga/shared/models';

import { GreasePdfReportModel, PDFGreaseReportResult } from '../../models';
import { GreaseReportDataGeneratorService } from '../grease-report-data-generator.service';
import { GreaseReportPdfFileSaveService } from './grease-report-pdf-file-save.service';
import { PdfInputsService } from './sections/pdf-inputs.service';
import { PdfMessagesService } from './sections/pdf-messages.service';
import { PdfResultsService } from './sections/pdf-results.service';
import {
  PDFStoreButtonComponent,
  QR_APPLE,
  QR_PLAY,
} from './sections/pdf-store-buttons';

const SCHMECKTHAL_PDF_LOGO =
  '';

@Injectable({ providedIn: 'root' })
export class PdfGenerationService {
  private readonly settingsFacade = inject(SettingsFacade);
  private readonly partnerVersion = toSignal(
    this.settingsFacade.partnerVersion$
  );
  private readonly fontResolver = inject(FontResolverService);
  private readonly pdfFileSaveService = inject(GreaseReportPdfFileSaveService);
  private readonly pdfInputsService = inject(PdfInputsService);
  private readonly pdfMessagesService = inject(PdfMessagesService);
  private readonly pdfResultsService = inject(PdfResultsService);
  private readonly translocoService = inject(TranslocoService);
  private readonly languageChanges = toSignal(
    this.translocoService.langChanges$,
    {
      initialValue: this.translocoService.getActiveLang(),
    }
  );

  private readonly dataGeneratorService = inject(
    GreaseReportDataGeneratorService
  );

  readonly customLogo = computed(() =>
    this.partnerVersion() === PartnerVersion.Schmeckthal
      ? SCHMECKTHAL_PDF_LOGO
      : undefined
  );

  readonly activeLang = computed(
    () => this.languageChanges() ?? this.translocoService.getActiveLang()
  );

  private readonly activeLang$ = toObservable(this.activeLang);

  readonly fonts = toSignal(
    this.activeLang$.pipe(
      switchMap((lang) => this.fontResolver.fetchForLocale(lang))
    ),
    { initialValue: [] as FontConfig[] }
  );

  public async generatePdf(report: GreasePdfReportModel): Promise<void> {
    const fonts = this.fonts();
    const reportTitle = this.getReportTitle(report.reportTitle);

    const resultData: PDFGreaseReportResult[] =
      await this.dataGeneratorService.prepareReportResultData(
        report.results,
        this.partnerVersion()
      );

    const doc = new PDFDocument()
      .addFont(...fonts)
      .setTextColor(Colors.DarkGreyVariant)
      .setPageMargin({ left: 7, right: 7, top: 6, bottom: 10 })
      .setDebug(false)
      .addFooter(this.getPdfFooter(report.legalNote))
      .addHeader(this.getPdfHeader(reportTitle, report.sectionSubTitle))
      .setComponentSpacing(1.5)
      .addComponent(...this.pdfInputsService.getInputsSection(report))
      .addComponent(ControlCommands.PageBreak);

    const resultComponents =
      this.pdfResultsService.generateResultsSection(resultData);
    resultComponents.forEach((component) => {
      doc.addComponent(component);
      doc.addComponent(new ConditionalPageBreak(20));
    });
    doc.addComponent(ControlCommands.PageBreak);
    doc
      .addComponent(...this.pdfMessagesService.getMessagesSection(report))
      .addComponent(
        new PDFStoreButtonComponent({
          buttons: [
            { store: 'AppStore', qrImageData: QR_APPLE },
            { store: 'PlayStore', qrImageData: QR_PLAY },
          ],
        })
      );
    doc.generate();

    const reportDate = new Intl.DateTimeFormat(
      this.translocoService.getActiveLang()
    ).format(Date.now());

    const fileName = this.getFileName(reportTitle, reportDate);

    this.pdfFileSaveService.saveAndOpenFile(doc, fileName);
  }

  private getReportTitle(reportTitle: string): string {
    return `Grease App ${reportTitle}`;
  }

  private getFileName(reportTitle: string, date: string): string {
    const partnerPrefix =
      this.partnerVersion() === PartnerVersion.Schmeckthal
        ? 'Schmeckthal Gruppe '
        : '';

    return `${partnerPrefix}${reportTitle} - ${date}.pdf`;
  }

  private getPdfHeader(
    reportTitle: string,
    hint24hOperation: string
  ): PDFHeader {
    return new PDFHeader({
      reportTitle,
      heading: reportTitle,
      headingDescription: hint24hOperation,
      date: {
        dateLocale: this.translocoService.getActiveLang(),
      },
      customLogo: this.customLogo(),
    });
  }

  private getPdfFooter(legalNote: string): DisclaimerFooter {
    return new DisclaimerFooter({
      disclaimerText: legalNote,
    });
  }
}
